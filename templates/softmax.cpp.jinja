{% macro func(node) -%}
    // blob size {{node.bsize}}
    // param size {{node.psize}}
    // input_size = {{node.input[0].bsize}}
    {% set sx = node.input[0].bsize[1] -%}
    RDom r_{{node.name}}(0, {{sx}}, "r_{{node.name}}");
    Func max_{{node.name}}("max_{{node.name}}");
    max_{{node.name}}(x) = 0.0f;
    max_{{node.name}}(0) = max(max_{{node.name}}(0), {{node.input[0].name}}(r_{{node.name}}));
    Func centered_{{node.name}}("centered_{{node.name}}");
    centered_{{node.name}}(x) = {{node.input[0].name}}(x) - max_{{node.name}}(0);
    Func exp_{{node.name}}("{{node.name}}");
    exp_{{node.name}}(x) = exp(centered_{{node.name}}(x)) ;
    Func sum_{{node.name}}("{{node.name}}");
    sum_{{node.name}}(x) = 0.0f;
    sum_{{node.name}}(0) += exp_{{node.name}}(r_{{node.name}});
    Func {{node.name}}("{{node.name}}");
    {{node.name}}(x) = exp_{{node.name}}(x)/sum_{{node.name}}(0);
{%- endmacro -%}


{% macro schedule(node) -%}
    // blob size {{node.bsize}}
    // param size {{node.psize}}
    // input_size = {{node.input[0].bsize}}
    {% set sx = node.input[0].bsize[1] -%}
    max_{{node.name}}.compute_root();
    sum_{{node.name}}.compute_root();
    {{node.name}}
        .compute_root()
        .parallel(x,parallel_sz)
        .vectorize(x,vector_width)
    ;
{%- endmacro -%}
