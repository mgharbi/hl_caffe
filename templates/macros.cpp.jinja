{% import "convolution.cpp.jinja" as conv -%}
{% import "maxpooling.cpp.jinja" as maxpooling -%}
{% import "innerproduct.cpp.jinja" as innerproduct -%}
{% import "relu.cpp.jinja" as relu -%}
{% import "softmax.cpp.jinja" as softmax -%}
{% import "lrn.cpp.jinja" as lrn -%}

{% macro func(node) -%}
{%- if node.type == "Data" %}
{%- elif node.type == "Convolution" %}
    {{conv.func(node)}}
{% elif node.type == "ReLU"%}
    {{relu.func(node)}}
{% elif node.type == "LRN" %}
    {{lrn.func(node)}}
{% elif node.type == "MaxPooling" %}
    {{maxpooling.func(node)}}
{% elif node.type == "InnerProduct" %}
    {{innerproduct.func(node)}}
{% elif node.type == "Softmax" %}
    {{softmax.func(node)}}
{% else %}
    NOT IMPLEMENTED > {{node.name}} {{node.type}}
{% endif -%}
{%- endmacro -%}


{% macro schedule(node) -%}
{%- if node.type == "Convolution" %}
    {{ conv.schedule(node) }}
{% elif node.type == "MaxPooling" %}
    {{ maxpooling.schedule(node) }}
{% elif node.type == "InnerProduct" %}
    {{ innerproduct.schedule(node) }}
{% elif node.type == "Softmax" %}
    {{softmax.schedule(node)}}
{% elif node.type == "LRN" %}
    {{lrn.schedule(node)}}
{% else %}
    {{node.name}}.compute_root();
{% endif -%}
{%- endmacro -%}


{% macro interface_load_input_param(node, datadir) -%}
{%- if node.type == "Convolution" or node.type == "InnerProduct"%}
    Image<float> w_{{node.name}} = load_net_params("{{datadir}}/params/w_{{node.name}}.npy");
    {% if node.params['bias_term'] -%}
    Image<float> b_{{node.name}} = load_net_params("{{datadir}}/params/b_{{node.name}}.npy");
    {% endif -%}
{% endif -%}
{%- endmacro -%}


{% macro interface_input_param(node) -%}
{%- if node.type == "Convolution" or node.type == "InnerProduct"%}
    ,w_{{node.name}}
    {%- if node.params['bias_term'] -%}
    ,b_{{node.name}}
    {%- endif -%}
{% endif -%}
{%- endmacro -%}


{% macro input_param(node) -%}
{%- if node.type == "Convolution" or node.type == "InnerProduct"%}
    {% if node.type == "Convolution"-%}
        ImageParam w_{{node.name}}(type_of<float>(), 4, "w_{{node.name}}");
    {% else -%}
        ImageParam w_{{node.name}}(type_of<float>(), 2, "w_{{node.name}}");
    {% endif -%}
    {% if node.params['bias_term'] -%}
    ImageParam b_{{node.name}}(type_of<float>(), 1, "b_{{node.name}}");
    {% endif -%}
{% endif -%}
{%- endmacro -%}
